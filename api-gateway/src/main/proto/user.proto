syntax = "proto3";

option java_multiple_files = true;
option java_package = "com.library.userservice.grpc";
option java_outer_classname = "UserProto";

package user;

// User message definition
message User {
    string id = 1;
    string username = 2;
    string email = 3;
    string first_name = 4;
    string last_name = 5;
    string phone = 6;
    string address = 7;
    int64 registration_date = 8; // Unix timestamp
    string status = 9; // ACTIVE, SUSPENDED, INACTIVE
    string membership_type = 10; // BASIC, PREMIUM, STUDENT
    int32 max_books_allowed = 11;
    int32 current_borrowed_books = 12;
    double outstanding_fines = 13;
    repeated string borrowed_book_ids = 14;
}

// Borrow history entry
message BorrowHistory {
    string transaction_id = 1;
    string book_id = 2;
    string book_title = 3;
    int64 borrow_date = 4; // Unix timestamp
    int64 due_date = 5; // Unix timestamp
    int64 return_date = 6; // Unix timestamp (0 if not returned)
    string status = 7; // BORROWED, RETURNED, OVERDUE
    double fine_amount = 8;
}

// Request messages
message RegisterRequest {
    string username = 1;
    string email = 2;
    string first_name = 3;
    string last_name = 4;
    string phone = 5;
    string address = 6;
    string membership_type = 7; // BASIC, PREMIUM, STUDENT
}

message UserRequest {
    string user_id = 1;
}

message BorrowHistoryRequest {
    string user_id = 1;
    int32 limit = 2;
    int32 offset = 3;
    string status_filter = 4; // Optional filter: BORROWED, RETURNED, OVERDUE
}

// Response messages
message UserResponse {
    bool success = 1;
    string message = 2;
    User user = 3;
}

message BorrowHistoryResponse {
    bool success = 1;
    string message = 2;
    repeated BorrowHistory history = 3;
    int32 total_count = 4;
}

// UserService definition with gRPC methods
service UserService {
    // Register a new user
    rpc RegisterUser(RegisterRequest) returns (UserResponse);
    
    // Get user information by ID
    rpc GetUser(UserRequest) returns (UserResponse);
    
    // Get user's borrow history
    rpc GetBorrowHistory(BorrowHistoryRequest) returns (BorrowHistoryResponse);
}